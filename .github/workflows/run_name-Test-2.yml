name: NodeJs CI/CD Flow
run-name: Prod-Env = ${{ inputs.CICD_prod }} | Stage-env = ${{ inputs.CICD_stage }} | Dev-env = ${{ inputs.CICD_dev }} | Git tag - ${{ github.tags }} 

on:
  workflow_dispatch:
    inputs:
      
      CICD_prod:
        type: boolean
        description: 'multibuild - CICD-Production'
        default: "false"
        required: true
        
      CICD_dev:
        type: boolean
        description: 'multibuild - CICD-dev'
        default: "false"
        required: true
        
      CICD_stage:
        type: boolean
        description: 'multibuild - CICD-stage'
        default: "false"
        required: true

jobs:

  gamio-poker-build:
    name: Job ID - ${{ github.run_number }} | Git tag - ${{ github.tag }} || CommitID - ${{ github.sha }} || ${{github.inputs.CICD_prod }} || ${{ github.ref_name }}
    runs-on: ubuntu-latest
    if: |
        contains(github.event.inputs.CICD_prod, 'true')

    steps:
    - name: checkout
      uses: actions/checkout@v3
      
    - name: Git tag 
      uses: little-core-labs/get-git-tag@v3.0.1
      id: tagName
      with:
        tagRegex: "foobar-(.*)"  # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
        tagRegexGroup: 1 # Optional. Default is 1.
        
    - name: Some other step # Output usage example
      with:
        tagname: ${{ steps.tagName.outputs.tag }}
   
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install
      
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: rajuvdocker/springboot-images-githubaction
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: java-app
        IMAGE_TAG: ${{ github.sha }}
        AWS_REGION: ap-south-1
      run: |
        #docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . 
        docker build -t $REGISTRY/$REPOSITORY:$GIT_TAG_NAME .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        
    - name: Deploy CICD NodeApp for Dev Environment
      if: |
        contains(github.event.inputs.CICD_develop, 'true')
      run: |
        sed -i "s/VERSION/${IMAGE_TAG}/g" definition.json
        aws ecs register-task-definition --cli-input-json file://definition.json --region=${AWS_REGION}
        LATEST_REV=$(aws ecs describe-task-definition --task-definition dev-CICD --region=${AWS_REGION} --query 'taskDefinition.taskDefinitionArn' | cut -d '/' -f2 | tr -cd [:digit:])
        aws ecs update-service --force-new-deployment --cluster develop-cluster --service dev-CICD --task-definition dev-CICD:${LATEST_REV} --desired-count 1 --region=${AWS_REGION}
