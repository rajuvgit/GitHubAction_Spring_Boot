run-name: Project-NodeJs CI/CD Flow || ${{ github.ref_name }} | ${{ inputs.CICD_prod }} | ${{ github.run_number }} | 

on:
  workflow_dispatch:
    inputs:
      
      CICD_prod:
        type: boolean
        description: 'multibuild - CICD-Production'
        default: "false"
        required: true
      
      Test_prod:
        type: boolean
        description: 'multibuild - Test-Production'
        default: "false"
        required: true

jobs:

  gamio-poker-build:
    name: Job ID - ${{ github.run_number }} || CommitID - ${{ github.sha }} || ${{github.inputs.CICD_prod }} || ${{ github.ref_name }}
    runs-on: ubuntu-latest
    if: |
        contains(github.event.inputs.CICD_prod, 'true')

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install
      
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: rajuvdocker/springboot-images-githubaction
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: java-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
