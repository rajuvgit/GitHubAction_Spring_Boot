name: TestPro CICD Flow1
run-name:  Tag=  ${{ github.event.release.tag_name }} | Prod-Env = ${{ inputs.CICD_prod }} || CommitID - ${{ github.sha }} 

on:

  workflow_dispatch: 
  
    inputs:
      
      CICD_prod:
        type: boolean
        description: 'multibuild - CICD-Production'
        default: "false"
        required: true
        
      CICD_dev:
        type: boolean
        description: 'multibuild - CICD-dev'
        default: "false"
        required: true
        
      CICD_stage:
        type: boolean
        description: 'multibuild - CICD-stage'
        default: "false"
        required: true
        
env:
  IMAGE_TAG: ${{ github.event.release.tag_name }}
 
jobs:

  gamio-poker-build:
    name: Git Tag - ${{ github.event.release.tag_name }} | Job ID - ${{ github.run_number }}  || CommitID - ${{ github.sha }} || ${{github.inputs.CICD_prod }} || ${{ github.ref_name }}
    runs-on: ubuntu-latest
    if: |
        contains(github.event.inputs.CICD_prod, 'true')

    steps:
    - name: checkout
      uses: actions/checkout@v3  
      
    # Bump version on merging Pull Requests with specific labels.
      # (bump:major,bump:minor,bump:patch)
    - id: bumpr
      if: "!startsWith(github.ref, 'refs/tags/')"
      uses: haya14busa/action-bumpr@v1
      # Update corresponding major and minor tag.
      # e.g. Update v1 and v1.2 when releasing v1.2.3
    - uses: haya14busa/action-update-semver@v1
      if: "!steps.bumpr.outputs.skip"
      with:
          tag: ${{ steps.bumpr.outputs.next_version }}
      # Get tag name.
    - id: tag
      uses: haya14busa/action-cond@v1
      with:
        cond: "${{ startsWith(github.ref, 'refs/tags/') }}"
        if_true: ${{ github.ref }}
        if_false: ${{ steps.bumpr.outputs.next_version }}  
      
    - uses: actions/create-release@v1
      if: "steps.tag.outputs.value != ''"
      env:
        # This token is provided by Actions, you do not need to create your own token
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.value }}
        release_name: Release ${{ steps.tag.outputs.value }}
        #body: ${{ steps.bumpr.outputs.message }}
        draft: false
        prerelease: false  
      
      
      
#      with:
#       fetch-depth: '0'

#    - name: Bump version and push tag
#      uses: anothrNick/github-tag-action@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
#        WITH_V: true
###      
#    - name: Set env for git tag
#      id : vars
#      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}"
#    - name: Test
#      run: |
#       echo $RELEASE_VERSION
#       echo ${{ env.RELEASE_VERSION }}
        
    - name: Check output
      env:
        RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
      run: |
        echo $RELEASE_VERSION
        echo ${{ steps.vars.outputs.tag }}  

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install
      
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: rajuvdocker/springboot-images-githubaction
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: java-app
        IMAGE_TAG: ${{ github.sha }}
        AWS_REGION: ap-south-1
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . 
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        
    - name: Deploy CICD NodeApp for Dev Environment
      if: |
        contains(github.event.inputs.CICD_develop, 'true')
      run: |
        sed -i "s/VERSION/${IMAGE_TAG}/g" definition.json
        aws ecs register-task-definition --cli-input-json file://definition.json --region=${AWS_REGION}
        LATEST_REV=$(aws ecs describe-task-definition --task-definition dev-CICD --region=${AWS_REGION} --query 'taskDefinition.taskDefinitionArn' | cut -d '/' -f2 | tr -cd [:digit:])
        aws ecs update-service --force-new-deployment --cluster develop-cluster --service dev-CICD --task-definition dev-CICD:${LATEST_REV} --desired-count 1 --region=${AWS_REGION}
